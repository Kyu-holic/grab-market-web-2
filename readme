1. npm install -g create-react-app 으로 리액트 설치

2. create-react-app . 으로 시작 (git bash에서 할 것)

3. public에 images 폴더 생성 및 이미지 넣기

4. src에서 MainPage폴더를 만들고 main 페이지에서 사용되는 index.css 옮기기(혹은 작성)

5. MainPage 폴더에 index.js를 생성하여 main페이지에 들어갈 내용들 작성 준비. 

6. App.js 에서 MainPage Component 불러오기

7. MainPage component에서 메인 페이지의 html코드들을 작성후 css 연결.

8. Axios 연결

9. MainPage의 return 부분에서 product-list 밑에 product-card 작성

10. axios의 then을 통해 products 안에는 result안의 products 값이 들어있는데, 리액트에서는 useState를 사용하여 값을 넣는다.

11. map함수를 이용하여 products의 길이만큼 반복하기

12. setProducts를 하여 업데이트하기

13. useEffect를 이용하여 네트워크 통신이 한번만 일어나게 하기
두번째 인자로 빈 배열[] 주는 것 절대로 까먹지 않기!!
그래야만 딱 한번 네트워크 요청을 하고 그 뒤로 계속해서 하지 않는다.

14. products의 값이 map함수를 통하여 product 변수 안에 들어갔으므로
    이미지, 상품 이름, 가격, 판매자를 product 값을 이용하여 넣는다.

15. component를 변경해주는 기능을 실행하기 위해 npm install react-router-dom@5.2.0을 이용하여 설치 

16. 루트 디렉토리의 index.js에 BrowserRouter를 불러와서 감싸주기

17. Upload를 위한 디렉토리를 만들어서 index.js 생성

18. Product 설명을 위한 디렉토리를 만들어서 index.js 생성

19. APp.js에서 Upload, Product component 불러오기

20. App.js 에서 Swtich, Route를 이용하여 Component를 연결시켜주기

21. React-router-dom을 이용하여 Link로 product-card를 Link로 감싸주기

22. App.js의 productPage 링크를 /products/:id로 바꿔서 :id에 숫자가 자유롭게 들어가게 해준다. 여기서 id는 아무 이름으로 정해도 상관없는 듯 
이건 나중에 다시 확인해보기 !!!!!!!!!!!!!!!!!

23. main의 index.js에서 product-link의 link to를 {`/products/${index}`}로 바꿔서 index가 숫자로 들어가게 만든다. index는 map함수의 속성

24. product의 index.js에서 useParams를 사용하면 App.js의 Route가 parameter(여기서는 :id)를 ProductPage component에 값을 넣어주게 된다.

25. mock server에서 기존 request에서 id값을 추가해주고 products/1이라는 새로운 request를 만들어주고, 거기에 첫번째 농구공 값을 description까지 넣어서 보내준다.

26. main의 index.js에서 map함수에서 사용되는 id값은 products의 고유한 id가 아니기 때문에 index에서 id로 바꾼다.

27. productpage에서 우리가 추출한 id값에 맞는 network를 요청해야 하므로 axios 사용. 
그러면 농구공을 클릭했을 때 새롭게 만든 mockserver에서의 request 값이 들어간 것을 확인 가능

28. 상품정보를 받았을 때 axios에서 result에 넣고 업데이트를 시켜주기 위해 useState사용. 

29. useState의 첫 값에는 null을 넣어줘서 product의 첫 값에는 null이 들어가게 설정 

30. then에 setProduct에 result.data값이 들어가게 한다.

31. 콘솔 로그를 찍어보면 처음 product에는 null값이 들어가기 때문에 null이 찍혔다가
네트워크를 받아서 result.data값이 setProduct에 들어감. 다시 위로 올라가서 요청을 읽은 다음 console.log에 product값이 찍힘

32. header, footer는 MainPage, ProductPage, UploadPage에 모두 공통적으로 들어가는 디자인이므로 main.js가 아닌 App.js로 옮겨주는 작업을 한다.

33. ProductPage를 꾸며준다.
    image-box / profile-box / contents-box(name, price, description)

34. 근데 여기까지만 하면 새로고침했을 때 오류가 발생할 것.
    어떤 코드때문이냐? product.imageUrl 과 product.seller때문.
    그 이유는 방어코드가 없기 때문인데, product의 초기값은 null로 되어있는 상태이다.
    네트워크 통신은 비동기 통신이기 때문에 결과를 받기 전에 바로 하단의 return이 실행되고 product.imageUrl의 product는 null값이 됨.
    그렇기 때문에 가운데에 if문을 통하여 방어코드를 짜준다. 
    product가 null일 때 나오는 화면을 만들면 되는데 return은 함수를 종료 시키는 구문이기도 하기 때문에 아래 리턴이 실행되지 않음
    근데 product에 값이 들어가고 나면 if는 null이 아니기 때문에 아래 return이 실행

35. product의 css 꾸미기

36. main의 index.css에서 *과 header 관련 속성들을 app.css로 가져오기

37. 로고 클릭했을 때 루트 페이지로 돌아올 수 있게 Link 태그사용하여 만들기

37. npm install antd사용하여 ant desingn 설치

38. antd 기본 css는 line heignt값이 있는데 이걸 리셋하기

39. antd를 이용하여 헤더의 가장 오른쪽에 위치할 상품업로드 버튼 만들기

40. npm install --save @ant-design/icons 이용하여 antd icon 설치

41. downloadOutlined 아이콘을 넣기

42. main의 index.js에서 Link로 사용하여 페이지 전환을 하던 것을 useHistory로 바꾸기

43. App.js에서 react-router-dom의 훅 중 하나인 useHsitory를 불러오고 antd의 버튼을
    클릭했을 때 uploadPage로 갈 수 있게 history.push 하기